package org.example.coffeemachine;

//        2*) У вас на работе есть один кофейный автомат. Он умеет готовить различные виды кофе. Но он только один.
//        Реализуйте класс кофейного автомата, с помощью которого любой человек может приготовить себе различные варианты кофе.
//        Но что важно, сколько ко бы раз не обращался человек за изготовлением кофе, или какие бы люди не пытались
//        приготовить кофе, они всегда получали бы ссылку на один и тот же объект кофейного автомата.
//        (Поищите информацию в интернете о паттерне Singleton и попытайтесь его реализовать при решении данной задачи.
//        Можно использовать вариант реализации со статическим методом и приватным конструктором,
//        или вариант реализации через Enum.)

public class SimpleCoffeeMachine {
    public static void main(String[] args) {
        CoffeeMachine coffeeMachine = CoffeeMachine.COFFEE_MACHINE;
        System.out.println("----------------------------------------------------------------------------------");
        System.out.println(coffeeMachine);
        System.out.println("----------------------------------------------------------------------------------");

        coffeeMachine.makeMilkCoffee();
        coffeeMachine.addSugar();
        System.out.println("----------------------------------------------------------------------------------");
        coffeeMachine.makeAmericano();
        coffeeMachine.addSugar();
        System.out.println("----------------------------------------------------------------------------------");
        coffeeMachine.makeCappuccino();
        coffeeMachine.addSugar();
    }
}
